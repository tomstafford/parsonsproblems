plot(y-resid)
source('~/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pearl/why1.R', echo=TRUE)
source('~/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pearl/why1.R', echo=TRUE)
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(size=2, shape=23)
ggplot(mtcars, aes(x=wt, y=mpg)) +
geom_point(size=4, shape=23)
i <- sqrt(1-r^2)
r <- 0.1
i <- sqrt(1-r^2)
seq(0,1,0.1)
r <- seq(0,1,0.1)
i <- sqrt(1-r^2)
i
ggplot(r,i)
ggplot(c(r,i))
df <- data.frame(r,i)
ggplot(df,aes(r,i))
df
ggplot(df,aes(r,i))+geom_point()
sqrt(i)
sqrt(r)
sqrt(i^2)
# Lisa's dev version 13 feb 2021 https://github.com/debruine/faux/blob/master/R/rnorm_pre.R
#' Sample Parameters from Population Parameters
#'
#' @param n sample size
#' @param mu population mean
#' @param sd population SD
#' @param r population r
#'
#' @return list of sample parameters (mu, sd, r)
#' @export
#'
#' @examples
#' sample_from_pop(10)
sample_from_pop <- function(n = 100, mu = 0, sd = 1, r = 0) {
# sample r from distribution depending on n and r
r_sd <- sqrt(1/n) * (1-r^2)
#sample_r <- stats::rnorm(1, r, r_sd) %>% pmax(-1) %>% pmin(1)
sample_r <- mapply(stats::rnorm, 1, r, r_sd) %>% pmax(-1) %>% pmin(1)
# sample mu from distribution depending on n and sd
mu_sd <- sd / sqrt(n)
#sample_mu <- stats::rnorm(1, mu, mu_sd)
sample_mu <- mapply(stats::rnorm, 1, mu, mu_sd)
# sample sd from distribution depending on n and sd
sd_sd <- sd / sqrt(2*n)
# sample_sd <- stats::rnorm(1, sd, sd_sd)
sample_sd <- mapply(stats::rnorm, 1, sd, sd_sd)
list(
mu = sample_mu,
sd = sample_sd,
r = sample_r
)
}
#' Make a normal vector correlated to an existing vector
#'
#' \code{rnorm_pre} Produces a random normally distributed vector with the specified correlation to an existing vector
#'
#' @param x the existing vector or data table of all vectors
#' @param mu desired mean of returned vector
#' @param sd desired SD of returned vector
#' @param r desired correlation(s) between existing and returned vectors
#' @param empirical logical. If true, mu, sd and r specify the empirical not population mean, sd and covariance
#' @param threshold for checking correaltion matrix
#'
#' @return vector
#' @examples
#' v1 <- rnorm(10)
#' v2 <- rnorm_pre(v1, 0, 1, 0.5)
#' cor(v1, v2)
#' @export
rnorm_pre <- function (x, mu=0, sd=1, r=0, empirical = FALSE, threshold = 1e-12) {
# error checking
if (is.vector(x)) x <- data.frame(x)
#if (!is.numeric(x)) stop("x must be numeric")
if (nrow(x) < 3) stop("x must have length > 2")
n <- nrow(x)
d <- ncol(x)
rho <- rep(r, length.out = d)
if (!empirical) {
sample_params <- sample_from_pop(n, mu, sd, rho)
mu <- sample_params$mu
sd <- sample_params$sd
rho <- sample_params$r
}
# https://stats.stackexchange.com/questions/15011/generate-a-random-variable-with-a-defined-correlation-to-an-existing-variables
# answer by https://stats.stackexchange.com/users/919/whuber
# Process the arguments.
if (is.data.frame(x)) x <- as.matrix(x)
x <- scale(x, center=FALSE) # Makes computations simpler
y <- rnorm(n)
# Remove the effects of `x` on `y`.
e <- stats::residuals(stats::lm(y ~ x))
if (d == 1) {
z <- z <- rho * scale(x)[,1] + sqrt(1 - rho^2) *
scale(e)[,1]
} else {
# Calculate the coefficient `sigma` of `e`
# so that the correlation of `x` with the linear combination
# x.dual %*% rho + sigma*e is the desired vector.
x.dual <- with(svd(x), (n-1)*u %*% diag(ifelse(d > threshold, 1/d, 0)) %*% t(v))
sigma2 <- c((1 - rho %*% cov(x.dual) %*% rho) / var(e))
# Return this linear combination.
if (sigma2 >= 0) {
sigma <- sqrt(sigma2)
z <- x.dual %*% rho + sigma*e
} else {
warning("Correlations are impossible.")
z <- rep(0, n)
}
}
as.vector(mu + sd * z)
}
Y <-rnorm_pre(c(X,C,M), mu = mu, sd = sigma,XtM)
Y
Y <-rnorm_pre(c(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY)
)
Y
c(X,C,M)
a <- c(X,C,M)
a
data.frame(X,C,M)
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
data.frame(X,C,M)
XtY
CtY
MtY
0.8
XtY <- 0
CtY <- 0.1
MtY <- 0.1
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
Y
cor(X,Y)
cor(C,Y)
cor(M,Y)
XtY <- 0
CtY <- 0.3
MtY <- 0.6
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
cor(X,Y)
cor(X,Y)
cor(C,Y)
Y
XtY <- 0
CtY <- 0.3
MtY <- 0.3
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
cor(X,Y)
X
data.frame(X,C,M)
XtY <- 0
CtY <- 0.2
MtY <- 0.2
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
cor(X,Y)
cor(C,Y)
cor(M,Y)
XtY <- 0
CtY <- 0.2
MtY <- 0.4
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
cor(X,Y)
cor(C,Y)
cor(M,Y)
XtY <- 0.0
#a confounder
CtY <- 0.3
CtX <- 0.3
#a mediator
XtM <- 0.3
MtY <- 0.3
#to be explicit, no relation between C and M
CtM <- 0
#we simulate data using Lisa's faux package
#https://debruine.github.io/faux/articles/rnorm_multi.html
n <- 1000 # size of our simulated data set
mu <- 0 #all variables follow standard normal
sigma <- 1
#now we need to generate a system of related variables using these parameters
# we DON'T simulate a correlation matrix, because we need to explicitly model causal effects
# so we generate the variables in sequence
#C doesn't listen to anything, so we just generate a vector
C = rnorm(n,mu,sigma)
#X listens to C only
X<- rnorm_pre(C, mu = mu, sd = sigma, CtX)
#M listens to X
M<- rnorm_pre(X, mu = mu, sd = sigma, XtM)
#Y listens to X, C and M
Y <-rnorm_pre(data.frame(X,C,M), mu = mu, sd = sigma,c(XtY,CtY,MtY))
cor(X,Y)
cor(C,Y)
cor(X,Y)
cor(X,Y)
Y <-rnorm_pre(data.frame(C,M), mu = mu, sd = sigma,c(CtY,MtY))
cor(X,Y)
#our main effect,
cor(X,Y) #correlation of X on Y looks non-zero, but it is fact entirely due to confound
m1 <- lm (Y ~ X)
summary(m1) #ie the coefficient of X is non-zero (and in this example ~0.75)
m2 <- lm (Y ~ X + C)
summary(m2)
m2 <- lm (Y ~ X + M)
summary(m2)
m1 <- lm (Y ~ X)
summary(m1) #ie the coefficient of X is non-zero (and in this example ~0.75)
m2 <- lm (Y ~ X + M)
summary(m2)
#although only indirectly related, a simple regression would suggest "X affects Y"
m1 <- lm (Y ~ X)
summary(m1) #ie the coefficient of X is non-zero (and in this example ~0.75)
#controlling for C, reduced estimate of effect of X on Y
m2 <- lm (Y ~ X + C)
summary(m2)
#controlling for M,
m3 <- lm (Y ~ X + M)
summary(m3)
source('~/t.stafford@sheffield.ac.uk/A_UNIVERSITY/toys/pearl/why1.R', echo=TRUE)
c(1, 2, 3, 1, 3, 5, 25)
my_numbers <- c(1, 2, 3, 1, 3, 5, 25)
table(my_numbers)
sd(my_numbers)
my_numbers * 5
1
1+2
c(1,2,45,5,5,3)
my_numbers <- c(1,2,3,1,3,5,25)
your numbers <- c(5,31,71,1,3,21,6)
your_numbers <- c(5,31,71,1,3,21,6)
my_numbers
my_numbers
my_numbers
my_numbers
my_numbers
my_numbers
my_numbers
my_numbers
my_numbers
your_numbers
your_Numbers
c(1,2,3)
mean()
mean(my_numbers)
mean(x = my_numbers)
mean(my_numbers)
mean(x = your_numbers)
summary(my_numbers)
my_summary <- summary(my_numbers)
table(my_numbers)
sd(my_numbers)
my_numbers * 5
my_numbers
my_numbers * 12
my_numbers/300*100
my_numbers*(1/300)
my_numbers*(1/300)*100
my_numbers
my_numbers *(1/2)
my_numbers+my_numbers
my_numbers*2
c(my_numbers,my_numbers)
c(my_numbers,my_numbers)
my_numbers*2
class(my_numbers)
class(my_summary)
my_new_vector <- c(my_numbers, "Apple")
my_new_vector
class(my_numbers)
class(my_new_vector)
mean(my_numbers)
mean(my_new_vector)
my_new_vector
class(my_new_vector)
a <- "1"
b <- "2"
a
b
class(a)
a+b
"dogs" > "cats"
cats <- 10
dogs <- 2
dogs > cats
"dogs"
dogs
class(dogs)
class("dogs")
"a" > "b"
"c" > "b"
"d" > "c"
titanic
library(socviz)
titanic
Titanic
titanic
class(titanic)
titanic$n
my_new_vector[1:7]
my_new_vector[1:8]
my_new_vector[1:]
my_new_vector[1:7]
my_newnew_vector <- my_new_vector[1:7]
my_newnew_vector
class(my_newnew_vector)
titanic$percent
titanic$percent[3]
titanic
ggplot(data = titantic, aes(x = n, y = percent)) + geom_point()
library(tidyverse)
ggplot(data = titantic, aes(x = n, y = percent)) + geom_point()
ggplot(data = titanic, aes(x = n, y = percent)) + geom_point()
titanic
library(abind)
detach("package:abind", unload = TRUE)
my_numbers <- c(1, 2, 3, 1, 3, 5, 25)
my_numbers/26
my_numbers/26*100
my_numbers/300*100
(my_numbers/300)*100
(my_numbers/300)
my_numbers/300*100
my_vec <- c(my_numbers, "apple")
#now this list is NOT numeric
class(my_vec)
my_vec[1:7]
new_vec <- my_vec[1:7]
class(new_vec)
as.numeric(new_vec)
class(new_vec)
new_vec <- as.numeric(new_vec)
class(new_vec)
library(socviz)
class(titanic)
titanic
titanic$percent
class(titanic$percent)
class(titanic$n)
class(titanic$sex)
class(titanic$fate)
tbl(titanic)
tbl <- as_tibble(titanic)
tbl <- as.tibble(titanic)
library(tidyverse)
tbl <- as.tibble(titanic)
class(tbl)
tbl
p = dbinom(x = 1:100, p = 0.7, size = 100)
hist(p)
plot(p)odds = p/(1-p)plot(odds)
plot(p)
odds = p/(1-p)
plot(odds)
hist(p)
hist(p)
hist(odds)
p
odds
hist(log(odds))
p = dbinom(x = 1:100, p = 0.7, size = 100)
p
hist(p)
hist(p*(1-p))
hist(log(p*(1-p)))
odds
plot(odds)
plot(p)
p
p*100
p*10000
p*100000000
p/sum(p)
plot(p)
plot(cumsum(p))
plot(cumsum(p/(1-p)))
plot(cumsum(log(p/(1-p))))
p=1:100
plot(p,p*(1-p))
p=(1:100)/100
plot(p,p*(1-p))
plot(p,log(p*(1-p)))
plot(p,p*(1-p))
znorm(0)
dnorm(0)
dnorm(1)
pnorm(1)
pnorm(1.96)
pnorm(3)
qnorm(1.96)
qnorm(0.95)
p <- (1:100)/100
q <- qnorm(p)
plot(q,p*(1-p))
plot(q,cumsum(p*(1-p)))
plot(q,cumsum(log(p*(1-p))))
plot(q,log(cumsum((p*(1-p))))
)
p <- (1:100)/100
p <- (1:100)/100
c=sumsum(p)
p <- (1:100)/100
c <- cumsum(p)
x = rnorm(100) #continuous predictor
x
plot(x)
log_odds = x + 1 #defining log odds as a linear function of x
odds = exp(log_odds)
plot(odds~x)
prob = sigmoid(odds)
plot(prob~x)
y = rbinom(n = 100, size = 1, prob = pr)
p <- (1:100)/100
p <- (1:100)/100
c <- cumsum(p)
odds = 1/(1-p)
plot(p,odds)
q <- qnorm(p)
plot(q,odds)
plot(q,log(odds))
co = cumsum(odds)
plot(q,co)
plot(q,log(co))
name <- "files/0023/expt_A_trial_002.png"
seperate(name,c(NA,NA,fname))
separate(name,c(NA,NA,fname))
library(tidyverse)
separate(name,c(NA,NA,fname))
separate(name,c(NA,NA,fname),sep="/")
str_splot(name,sep="/")
str_split(name,sep="/")
str_split(name,"/")
str_split(name,"/")[3]
str_split(name,"/")[2]
str_split(name,"/")[[2]]
str_split(name,"/")
str_split(name,"/")[1]
str_split(name,"/")[1][3]
str_split(name,"/")
filename=str_split(name,"/")
filename[3]
filename[,2]
filename[1]
filename[1][3]
str_split_fixed(name,"/")
str_split(name,"/",simplify=TRUE)
str_split(name,"/",simplify=TRUE)[3]
filename=str_split(name,"/",simplify=TRUE)[3] #get just the filename
trialname=str_split(filename,"_",simplify=TRUE)[4] #get the trial name + extension
parse_number(trialname)
trialname=parse_number(trialname) #remove the exension
print(paste("this is trial ",trialname))
print(paste0("this is trial ",trialname)) #output
# script to extract filename from full path
library(tidyverse)
name <- "files/0023/expt_A_trial_002.png"
filename=str_split(name,"/",simplify=TRUE)[3] #get just the filename
trialname=str_split(filename,"_",simplify=TRUE)[4] #get the trial name + extension
trialname=parse_number(trialname) #remove the exension
print(paste0("this is trial ",trialname)) #output
linspace(-6,6,100)
seq(-6,6,100) #
x <-  seq(-6,6,0.1) #get x values for the points
sin(x)
p <-ggplot(data.frame(x,y),aes(x,y)) #make plot object
p + geom_point() #add layer to show points
p <- ggplot(data.frame(x,y),aes(x,y)) #make plot object
x <-  seq(-6,6,0.1) #get x values for the points
y = sin(x) #get the corresponding y values
p <- ggplot(data.frame(x,y),aes(x,y)) #make plot object
p + geom_point() #add layer to show points
p + geom_point() + #add layer to show points
xlab('x in radians')
p + geom_point() + #add layer to show points
xlab('x in radians') + #add labels
ylab('sin(x)')
# script to draw a sine wave '''
library(here) #file location functions
library(tidyverse) #graphing and wrangling functions
x <-  seq(-6,6,0.1) #get x values for the points
y = sin(x) #get the corresponding y values
p <- ggplot(data.frame(x,y),aes(x,y)) #make plot object
p + geom_point() + #add layer to show points
xlab('x in radians') + #add labels
ylab('sin(x)')
ggsave(here("outputs","sine.png")) #export graph as png
setwd("~/Desktop/parsonsproblems")
str_split(name,"/",simplify=TRUE)[3]
# script to draw a sine wave '''
library(here) #file location functions
library(tidyverse) #graphing and wrangling functions
x <-  seq(-6,6,0.1) #get x values for the points
y = sin(x) #get the corresponding y values
p <- ggplot(data.frame(x,y),aes(x,y)) #make plot object
p + geom_point() + #add layer to show points
xlab('x in radians') + #add labels
ylab('sin(x)')
ggsave(here("outputs","sine.png")) #export graph as png
setwd("~/Desktop/parsonsproblems")
# script to draw a sine wave '''
library(here) #file location functions
# script to draw a sine wave '''
library(here) #file location functions
library(tidyverse) #graphing and wrangling functions
x <-  seq(-6,6,0.1) #get x values for the points
y = sin(x) #get the corresponding y values
p <- ggplot(data.frame(x,y),aes(x,y)) #make plot object
p + geom_point() + #add layer to show points
xlab('x in radians') + #add labels
ylab('sin(x)')
ggsave(here("outputs","sine.png")) #export graph as png
